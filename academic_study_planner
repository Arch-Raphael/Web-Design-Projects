<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academic Planner</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Black and Grey Theme */
            --primary-dark: #1A1A1A; /* Very dark grey/black for base backgrounds */
            --secondary-dark: #2C2C2C; /* Dark grey for main content areas */
            --accent-color: #00BFFF; /* Deep Sky Blue - vibrant accent */
            --text-light: #FFFFFF; /* Pure white for main text */
            --text-dark: #CCCCCC; /* Light grey for secondary text, placeholders */
            --border-color: #555555; /* Medium grey for borders and lines */

            /* Button Colors */
            --button-bg: #444444; /* General button background, dark grey */
            --button-hover: #555555; /* General button hover, slightly lighter grey */
            --action-button-bg: var(--accent-color); /* For primary actions like "Add", "Start" */
            --action-button-hover: #009ACD; /* Darker accent color on hover */
            --delete-red: #E74C3C; /* Red for delete buttons */
            --delete-red-hover: #C0392B;
            --pomodoro-orange: #FFA500; /* Standard Orange for pause button */
            --pomodoro-orange-hover: #CC8400;

            --border-radius: 8px;
            --box-shadow-dark: 0 4px 15px rgba(0, 0, 0, 0.6); /* More prominent shadow for dark theme */
        }

        body {
            font-family: 'Montserrat', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--primary-dark); /* Base dark background */
            color: var(--text-light);
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background-image: url('https://images.unsplash.com/photo-1522204523234-8729aa6d324e?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
            background-size: cover;
            background-position: center;
            background-attachment: fixed; /* Keeps background fixed when scrolling */
            background-blend-mode: overlay; /* Blends image with background-color */
            background-color: rgba(26, 26, 26, 0.8); /* Primary dark with opacity for blending */
        }

        nav {
            background-color: var(--primary-dark);
            padding: 1rem 0;
            box-shadow: var(--box-shadow-dark);
            text-align: center;
        }

        nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            justify-content: center;
            gap: 2.5rem;
        }

        nav a {
            color: var(--text-light);
            text-decoration: none;
            font-weight: 600;
            padding: 0.7rem 1.2rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            border-radius: var(--border-radius);
            font-size: 1.1rem;
        }

        nav a:hover, nav a.active {
            background-color: var(--accent-color);
            color: var(--primary-dark); /* Dark text on bright accent */
            transform: translateY(-3px);
            box-shadow: 0 4px 10px rgba(0, 191, 255, 0.4); /* Shadow matching accent */
        }

        #page-quote {
            text-align: center;
            padding: 1rem 2rem;
            background-color: var(--secondary-dark); /* Secondary dark with opacity */
            color: var(--accent-color);
            font-style: italic;
            font-size: 1.1rem;
            margin-bottom: 2rem;
            box-shadow: var(--box-shadow-dark);
            border-bottom: 2px solid var(--border-color);
        }

        main {
            flex: 1;
            padding: 2rem;
            max-width: 1200px;
            margin: 2rem auto;
            background-color: var(--secondary-dark); /* Main content background */
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-dark);
        }

        section {
            display: none; /* Hidden by default */
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        section:last-child {
            border-bottom: none;
        }

        section.active {
            display: block;
        }

        h2 {
            font-family: 'Playfair Display', serif;
            color: var(--accent-color);
            margin-bottom: 1.5rem;
            text-align: center;
            font-size: 2.2rem;
        }

        /* General Input and Button Styles for Dark Theme */
        input[type="text"],
        input[type="number"],
        input[type="date"] {
            background-color: var(--primary-dark);
            color: var(--text-light);
            padding: 0.8rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 1rem;
            box-sizing: border-box;
        }
        input::placeholder {
            color: var(--text-dark);
        }
        input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(0, 191, 255, 0.3);
        }

        button {
            background-color: var(--button-bg);
            color: var(--text-light);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        button:hover {
            background-color: var(--button-hover);
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        /* Specific action buttons using accent color */
        #add-subject-container button,
        #add-todo-btn,
        #add-deadline-container button,
        #timer-settings button,
        #start-btn {
            background-color: var(--action-button-bg);
        }
        #add-subject-container button:hover,
        #add-todo-btn:hover,
        #add-deadline-container button:hover,
        #timer-settings button:hover,
        #start-btn:hover {
            background-color: var(--action-button-hover);
        }


        /* Home Page Styles */
        #home-content {
            text-align: center;
            padding: 3rem 0;
        }

        #home-content p {
            font-size: 1.2rem;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
        }

        #quote-display {
            font-family: 'Playfair Display', serif;
            font-size: 1.8rem;
            font-style: italic;
            color: var(--accent-color);
            margin-top: 2rem;
            padding: 1rem;
            background-color: var(--primary-dark);
            border-radius: var(--border-radius);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
        }

        #change-quote-btn {
            margin-top: 1.5rem;
        }


        /* Subjects Page Styles */
        #add-subject-container {
            display: flex;
            gap: 10px;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        #subjects-content ul {
            list-style: none;
            padding: 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1rem;
        }

        #subjects-content li {
            background-color: var(--primary-dark);
            padding: 1rem 1.5rem;
            border-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.1rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
        }

        #subjects-content li .subject-info {
            flex-grow: 1;
        }

        #subjects-content .grade {
            font-weight: 600;
            color: var(--accent-color);
            background-color: var(--secondary-dark);
            padding: 0.3rem 0.8rem;
            border-radius: 5px;
            margin-left: 10px;
        }

        #subjects-content li button.remove-subject-btn {
            background-color: var(--delete-red);
            color: white;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }
        #subjects-content li button.remove-subject-btn:hover {
            background-color: var(--delete-red-hover);
        }


        /* To-Do List Styles */
        #todo-input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 1.5rem;
        }

        #todo-list {
            list-style: none;
            padding: 0;
        }

        #todo-list li {
            background-color: var(--primary-dark);
            padding: 1rem 1.5rem;
            margin-bottom: 0.8rem;
            border-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
        }

        #todo-list li.completed {
            background-color: #0A0A0A; /* Even darker for completed tasks */
            text-decoration: line-through;
            color: var(--text-dark);
        }

        #todo-list li span {
            flex-grow: 1;
            cursor: pointer;
        }

        #todo-list li button {
            background-color: var(--delete-red);
            color: white;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            margin-left: 10px;
        }
        #todo-list li button:hover {
            background-color: var(--delete-red-hover);
        }

        /* Calendar View Styles */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
            text-align: center;
        }

        .calendar-grid .day-name {
            font-weight: 600;
            background-color: var(--button-bg); /* Dark grey for day names */
            color: var(--text-light);
            padding: 0.5rem;
            border-radius: 5px;
        }

        .calendar-grid .day {
            background-color: var(--primary-dark);
            color: var(--text-light);
            padding: 0.8rem 0.5rem;
            min-height: 80px;
            border-radius: 5px;
            position: relative;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .calendar-grid .day:hover {
            background-color: #222222; /* Slightly lighter primary dark on hover */
        }

        .calendar-grid .day.current-month {
            background-color: var(--secondary-dark); /* Default day background in current month */
            border: 1px solid var(--border-color);
        }

        .calendar-grid .day.today { /* Highlight for today's date */
            background-color: var(--accent-color);
            color: var(--primary-dark); /* Dark text on bright accent */
            font-weight: 700;
            border: 2px solid #007DAA; /* Darker accent border */
            box-shadow: 0 0 15px rgba(0, 191, 255, 0.6);
            transform: scale(1.05);
            z-index: 2;
        }
        .calendar-grid .day.today .deadline-dot {
            background-color: var(--primary-dark); /* Dark dot on accent background */
        }
        .calendar-grid .day.today .deadline-info {
            color: var(--primary-dark); /* Dark text on accent */
        }


        .calendar-grid .day.has-deadline {
            background-color: #3A3A3A; /* A distinct darker grey for deadlines */
            border: 1px solid var(--accent-color);
        }

        .calendar-grid .day .deadline-dot {
            width: 8px;
            height: 8px;
            background-color: var(--accent-color);
            border-radius: 50%;
            position: absolute;
            bottom: 5px;
            left: 50%;
            transform: translateX(-50%);
        }

        .calendar-grid .day .deadline-info {
            font-size: 0.75rem;
            color: var(--text-light);
            margin-top: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding-top: 15px;
        }

        .calendar-grid .day .remove-deadline-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            cursor: pointer;
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 3px;
            opacity: 0;
            transition: opacity 0.3s ease, background-color 0.2s ease;
            line-height: 1;
            height: 18px;
            width: 18px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .calendar-grid .day.today .remove-deadline-btn {
             background-color: rgba(255, 255, 255, 0.4); /* Lighter background on today's date */
             color: var(--primary-dark);
        }

        .calendar-grid .day:hover .remove-deadline-btn {
            opacity: 1;
        }
        .calendar-grid .day .remove-deadline-btn:hover {
            background-color: var(--delete-red);
            color: white;
        }


        #add-deadline-container {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: var(--primary-dark);
            border-radius: var(--border-radius);
            display: flex;
            flex-direction: column;
            gap: 10px;
            box-shadow: var(--box-shadow-dark);
        }

        #add-deadline-container label {
            font-weight: 600;
            color: var(--text-dark);
        }


        /* Study Timer Styles */
        #timer-content {
            text-align: center;
            padding: 2rem;
        }

        #timer-settings {
            background-color: var(--primary-dark);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 2rem;
            box-shadow: var(--box-shadow-dark);
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: flex-end;
            gap: 15px;
        }

        #timer-settings div {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        #timer-settings label {
            margin-bottom: 5px;
            color: var(--text-dark);
            font-weight: 600;
        }
        #timer-settings input {
            width: 80px; /* Fixed width for time inputs */
            text-align: center;
        }


        #timer-display {
            font-family: 'Playfair Display', serif;
            font-size: 4rem;
            margin-bottom: 2rem;
            color: var(--accent-color);
            background-color: var(--primary-dark);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            display: inline-block;
            min-width: 250px;
            box-shadow: var(--box-shadow-dark);
        }

        #timer-controls button#pause-btn {
            background-color: var(--pomodoro-orange);
        }

        #timer-controls button#pause-btn:hover {
            background-color: var(--pomodoro-orange-hover);
        }

        #timer-controls button#reset-btn {
            background-color: var(--delete-red);
        }

        #timer-controls button#reset-btn:hover {
            background-color: var(--delete-red-hover);
        }

        #timer-controls button#short-break-btn {
            background-color: var(--button-bg); /* Use general button bg for break */
        }

        #timer-controls button#short-break-btn:hover {
            background-color: var(--button-hover);
        }

        footer {
            text-align: center;
            padding: 1.5rem;
            margin-top: 2rem;
            background-color: var(--primary-dark);
            color: var(--text-dark);
            box-shadow: 0 -4px 15px rgba(0, 0, 0, 0.6);
        }
    </style>
</head>
<body>
    <nav>
        <ul>
            <li><a href="#home" class="active" data-section="home">Home</a></li>
            <li><a href="#subjects" data-section="subjects">Subjects</a></li>
            <li><a href="#todo" data-section="todo">To-Do List</a></li>
            <li><a href="#calendar" data-section="calendar">Calendar View</a></li>
            <li><a href="#timer" data-section="timer">Study Timer</a></li>
        </ul>
    </nav>

    <div id="page-quote"></div>

    <main>
        <section id="home-content" class="active">
            <h2>Welcome to Your Planner!</h2>
            <p>Stay organized, motivated, and on top of your academic journey.</p>
            <div id="quote-display"></div>
            <button id="change-quote-btn">Next Quote</button>
        </section>

        <section id="subjects-content">
            <h2>Your Subjects & Grades</h2>
            <div id="add-subject-container">
                <input type="text" id="subject-name-input" placeholder="Subject Name">
                <input type="text" id="subject-grade-input" placeholder="Grade (e.g., A+, B)">
                <button id="add-subject-btn">Add Subject</button>
            </div>
            <ul id="subjects-list">
                </ul>
        </section>

        <section id="todo-content">
            <h2>Your To-Do List</h2>
            <div id="todo-input-container">
                <input type="text" id="todo-input" placeholder="Add a new task...">
                <button id="add-todo-btn">Add Task</button>
            </div>
            <ul id="todo-list">
                </ul>
        </section>

        <section id="calendar-content">
            <h2>Academic Calendar</h2>
            <div class="calendar-grid">
                <div class="day-name">Sun</div>
                <div class="day-name">Mon</div>
                <div class="day-name">Tue</div>
                <div class="day-name">Wed</div>
                <div class="day-name">Thu</div>
                <div class="day-name">Fri</div>
                <div class="day-name">Sat</div>
                </div>

            <div id="add-deadline-container">
                <h3>Add New Deadline</h3>
                <label for="deadline-date">Date:</label>
                <input type="date" id="deadline-date">
                <label for="deadline-description">Description:</label>
                <input type="text" id="deadline-description" placeholder="e.g., Math Exam, Project Due">
                <button id="add-deadline-btn">Add Deadline</button>
            </div>
        </section>

        <section id="timer-content">
            <h2>Study Timer (Pomodoro)</h2>
            <div id="timer-settings">
                <div>
                    <label for="study-time-input">Study Time (minutes):</label>
                    <input type="number" id="study-time-input" value="25" min="1">
                </div>
                <div>
                    <label for="break-time-input">Break Time (minutes):</label>
                    <input type="number" id="break-time-input" value="5" min="1">
                </div>
                <button id="set-times-btn">Set Times</button>
            </div>
            <div id="timer-display">25:00</div>
            <div id="timer-controls">
                <button id="start-btn">Start</button>
                <button id="pause-btn">Pause</button>
                <button id="reset-btn">Reset</button>
                <button id="short-break-btn">Start Break</button>
            </div>
        </section>
    </main>

    <footer>
        <p>&copy; 2025 Academic Planner. All rights reserved.</p>
    </footer>

    <script>
        // --- Global Variables ---
        const sections = document.querySelectorAll('section');
        const navLinks = document.querySelectorAll('nav a');
        const pageQuoteDisplay = document.getElementById('page-quote');

        // --- Quotes per page ---
        const pageQuotes = {
            home: "Your journey to success begins here.",
            subjects: "Mastering subjects is key to unlocking new possibilities.",
            todo: "Break down big goals into small, actionable steps.",
            calendar: "Plan your time effectively; every deadline is a milestone.",
            timer: "Focus, rejuvenate, repeat. Productive study starts now."
        };

        // --- Home Page - Motivational Quotes ---
        const quotes = [
            "The best way to predict the future is to create it.",
            "Success is not final, failure is not fatal: it is the courage to continue that counts.",
            "Believe you can and you're halfway there.",
            "The expert in anything was once a beginner.",
            "Your only limit is your mind.",
            "The future belongs to those who believe in the beauty of their dreams.",
            "Education is the most powerful weapon which you can use to change the world.",
            "The only impossible journey is the one you never begin.",
            "Strive for progress, not perfection.",
            "The mind is not a vessel to be filled, but a fire to be kindled."
        ];
        const quoteDisplay = document.getElementById('quote-display');
        const changeQuoteBtn = document.getElementById('change-quote-btn');
        let currentQuoteIndex = 0;

        function changeQuote() {
            quoteDisplay.textContent = quotes[currentQuoteIndex];
            currentQuoteIndex = (currentQuoteIndex + 1) % quotes.length;
        }
        
        changeQuoteBtn.addEventListener('click', changeQuote);
        
        // --- Navigation Logic ---
        function showSection(sectionId) {
            sections.forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(`${sectionId}-content`).classList.add('active');

            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('data-section') === sectionId) {
                    link.classList.add('active');
                }
            });
            // Update page-specific quote
            pageQuoteDisplay.textContent = pageQuotes[sectionId];
        }

        navLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                const sectionId = event.target.getAttribute('data-section');
                showSection(sectionId);
            });
        });

        // --- Subjects Page - JSON Data and Functionality ---
        const subjectNameInput = document.getElementById('subject-name-input');
        const subjectGradeInput = document.getElementById('subject-grade-input');
        const addSubjectBtn = document.getElementById('add-subject-btn');
        const subjectsList = document.getElementById('subjects-list');

        // Load subjects from localStorage, or use a default if none exist
        let subjectsData = JSON.parse(localStorage.getItem('subjects')) || [
            {"name": "Mathematics", "grade": "A"},
            {"name": "Physics", "grade": "B+"},
            {"name": "Chemistry", "grade": "A-"}
        ];

        function saveSubjects() {
            localStorage.setItem('subjects', JSON.stringify(subjectsData));
        }

        function loadSubjects() {
            subjectsList.innerHTML = ''; // Clear existing list
            if (subjectsData.length === 0) {
                subjectsList.innerHTML = '<p style="text-align: center; color: var(--text-dark);">No subjects added yet. Add your first subject above!</p>';
            }
            subjectsData.forEach((subject, index) => {
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                    <div class="subject-info">
                        <span>${subject.name}</span>
                        <span class="grade">${subject.grade}</span>
                    </div>
                    <button class="remove-subject-btn" data-index="${index}">Remove</button>
                `;
                subjectsList.appendChild(listItem);

                // Add event listener for the remove button
                listItem.querySelector('.remove-subject-btn').addEventListener('click', (event) => {
                    const idxToRemove = event.target.dataset.index;
                    subjectsData.splice(idxToRemove, 1); // Remove 1 element at the given index
                    saveSubjects();
                    loadSubjects(); // Re-render the list
                });
            });
        }

        function addSubject() {
            const name = subjectNameInput.value.trim();
            const grade = subjectGradeInput.value.trim();

            if (name && grade) {
                // Check if subject already exists (case-insensitive)
                if (subjectsData.some(subject => subject.name.toLowerCase() === name.toLowerCase())) {
                    alert('A subject with this name already exists!');
                    return;
                }

                subjectsData.push({ name: name, grade: grade });
                subjectNameInput.value = '';
                subjectGradeInput.value = '';
                saveSubjects();
                loadSubjects(); // Re-render the list
            } else {
                alert('Please enter both subject name and grade.');
            }
        }

        addSubjectBtn.addEventListener('click', addSubject);
        subjectNameInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                addSubject();
            }
        });
        subjectGradeInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                addSubject();
            }
        });


        // --- To-Do List ---
        const todoInput = document.getElementById('todo-input');
        const addTodoBtn = document.getElementById('add-todo-btn');
        const todoList = document.getElementById('todo-list');

        let todos = JSON.parse(localStorage.getItem('todos')) || [];

        function renderTodos() {
            todoList.innerHTML = '';
            if (todos.length === 0) {
                todoList.innerHTML = '<p style="text-align: center; color: var(--text-dark);">No tasks added yet. Get organized!</p>';
            }
            todos.forEach((todo, index) => {
                const listItem = document.createElement('li');
                listItem.classList.toggle('completed', todo.completed);
                listItem.innerHTML = `
                    <span>${todo.text}</span>
                    <button data-index="${index}">Delete</button>
                `;
                todoList.appendChild(listItem);

                // Mark as completed/uncompleted
                listItem.querySelector('span').addEventListener('click', () => {
                    todos[index].completed = !todos[index].completed;
                    saveTodos();
                    renderTodos();
                });

                // Delete task
                listItem.querySelector('button').addEventListener('click', (event) => {
                    const idxToDelete = event.target.dataset.index;
                    todos.splice(idxToDelete, 1);
                    saveTodos();
                    renderTodos();
                });
            });
        }

        function addTodo() {
            const taskText = todoInput.value.trim();
            if (taskText !== '') {
                todos.push({ text: taskText, completed: false });
                todoInput.value = '';
                saveTodos();
                renderTodos();
            }
        }

        function saveTodos() {
            localStorage.setItem('todos', JSON.stringify(todos));
        }

        addTodoBtn.addEventListener('click', addTodo);
        todoInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                addTodo();
            }
        });

        // --- Calendar View ---
        const calendarGrid = document.querySelector('.calendar-grid');
        const addDeadlineBtn = document.getElementById('add-deadline-btn');
        const deadlineDateInput = document.getElementById('deadline-date');
        const deadlineDescriptionInput = document.getElementById('deadline-description');

        let deadlines = JSON.parse(localStorage.getItem('deadlines')) || [];

        function renderCalendar() {
            // Clear existing days, keep day names
            const existingDays = calendarGrid.querySelectorAll('.day');
            existingDays.forEach(day => day.remove());

            const today = new Date();
            const currentMonth = today.getMonth();
            const currentYear = today.getFullYear();
            const currentDayOfMonth = today.getDate();

            const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay(); // 0 for Sunday, 1 for Monday...
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

            // Add placeholder days for the previous month
            for (let i = 0; i < firstDayOfMonth; i++) {
                const dayDiv = document.createElement('div');
                dayDiv.classList.add('day');
                calendarGrid.appendChild(dayDiv);
            }

            // Add days of the current month
            for (let i = 1; i <= daysInMonth; i++) {
                const dayDiv = document.createElement('div');
                dayDiv.classList.add('day', 'current-month');
                dayDiv.textContent = i;
                
                const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                dayDiv.dataset.date = formattedDate;

                // Highlight today's date
                if (i === currentDayOfMonth && today.getMonth() === currentMonth && today.getFullYear() === currentYear) {
                    dayDiv.classList.add('today');
                }

                const dayDeadlines = deadlines.filter(d => d.date === dayDiv.dataset.date);
                if (dayDeadlines.length > 0) {
                    dayDiv.classList.add('has-deadline');
                    
                    const deadlineDot = document.createElement('div');
                    deadlineDot.classList.add('deadline-dot');
                    dayDiv.appendChild(deadlineDot);

                    // Add remove button for the day's deadlines
                    const removeBtn = document.createElement('button');
                    removeBtn.classList.add('remove-deadline-btn');
                    removeBtn.textContent = 'x';
                    removeBtn.addEventListener('click', (event) => {
                        event.stopPropagation(); // Stop event from bubbling up to day click
                        const targetDate = event.target.closest('.day').dataset.date;
                        // Remove all deadlines for this specific day
                        deadlines = deadlines.filter(d => d.date !== targetDate);
                        saveDeadlines();
                        renderCalendar(); // Re-render the calendar
                    });
                    dayDiv.appendChild(removeBtn);

                    const deadlineInfo = document.createElement('div');
                    deadlineInfo.classList.add('deadline-info');
                    // Display only the first deadline description to keep the box clean
                    deadlineInfo.textContent = dayDeadlines[0].description;
                    if (dayDeadlines.length > 1) {
                         deadlineInfo.textContent += ` (+${dayDeadlines.length - 1} more)`;
                    }
                    dayDiv.appendChild(deadlineInfo);
                }
                calendarGrid.appendChild(dayDiv);
            }
        }

        function addDeadline() {
            const date = deadlineDateInput.value;
            const description = deadlineDescriptionInput.value.trim();

            if (date && description) {
                deadlines.push({ date, description });
                saveDeadlines();
                renderCalendar();
                deadlineDateInput.value = '';
                deadlineDescriptionInput.value = '';
            } else {
                alert('Please enter both date and description for the deadline.');
            }
        }

        function saveDeadlines() {
            localStorage.setItem('deadlines', JSON.stringify(deadlines));
        }

        addDeadlineBtn.addEventListener('click', addDeadline);

        // --- Study Timer (Pomodoro) ---
        const timerDisplay = document.getElementById('timer-display');
        const studyTimeInput = document.getElementById('study-time-input');
        const breakTimeInput = document.getElementById('break-time-input');
        const setTimesBtn = document.getElementById('set-times-btn');
        const startBtn = document.getElementById('start-btn');
        const pauseBtn = document.getElementById('pause-btn');
        const resetBtn = document.getElementById('reset-btn');
        const shortBreakBtn = document.getElementById('short-break-btn');

        let timer;
        let defaultStudyTime = parseInt(localStorage.getItem('defaultStudyTime')) || 25; // in minutes
        let defaultBreakTime = parseInt(localStorage.getItem('defaultBreakTime')) || 5; // in minutes
        let timeLeft = defaultStudyTime * 60; // in seconds
        let isRunning = false;
        let isBreak = false;

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
        }

        function updateTimerDisplay() {
            timerDisplay.textContent = formatTime(timeLeft);
        }

        function startTimer() {
            if (isRunning) return;
            isRunning = true;
            timer = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    isRunning = false;
                    const audio = new Audio('https://www.soundjay.com/buttons/beep-07a.mp3'); // A simple beep sound
                    audio.play();

                    alert(isBreak ? "Break over! Time to study." : "Pomodoro finished! Take a break.");
                    
                    if (!isBreak) {
                        timeLeft = defaultBreakTime * 60; // Set to user's break time
                        isBreak = true;
                        shortBreakBtn.textContent = "Start Study"; // Change button text
                        updateTimerDisplay();
                    } else {
                        timeLeft = defaultStudyTime * 60; // Reset to user's study time
                        isBreak = false;
                        shortBreakBtn.textContent = "Start Break"; // Change button text
                        updateTimerDisplay();
                    }
                }
            }, 1000);
        }

        function pauseTimer() {
            clearInterval(timer);
            isRunning = false;
        }

        function resetTimer() {
            clearInterval(timer);
            isRunning = false;
            isBreak = false;
            timeLeft = defaultStudyTime * 60; // Reset to current study time setting
            updateTimerDisplay();
            shortBreakBtn.textContent = "Start Break"; // Ensure button text is correct
        }

        function startShortBreak() {
            clearInterval(timer);
            isRunning = false;
            isBreak = true; // Force into break mode
            timeLeft = defaultBreakTime * 60;
            updateTimerDisplay();
            startTimer();
            shortBreakBtn.textContent = "Start Study"; // Change button text
        }

        function setTimerTimes() {
            const newStudyTime = parseInt(studyTimeInput.value);
            const newBreakTime = parseInt(breakTimeInput.value);

            if (isNaN(newStudyTime) || newStudyTime < 1) {
                alert('Please enter a valid study time (at least 1 minute).');
                return;
            }
            if (isNaN(newBreakTime) || newBreakTime < 1) {
                alert('Please enter a valid break time (at least 1 minute).');
                return;
            }

            defaultStudyTime = newStudyTime;
            defaultBreakTime = newBreakTime;
            localStorage.setItem('defaultStudyTime', defaultStudyTime);
            localStorage.setItem('defaultBreakTime', defaultBreakTime);
            resetTimer(); // Apply new times and reset
            alert('Timer settings updated!');
        }

        setTimesBtn.addEventListener('click', setTimerTimes);
        startBtn.addEventListener('click', startTimer);
        pauseBtn.addEventListener('click', pauseTimer);
        resetBtn.addEventListener('click', resetTimer);
        shortBreakBtn.addEventListener('click', () => {
            if (isBreak) { // If currently in break, switch to study
                clearInterval(timer);
                isRunning = false;
                isBreak = false;
                timeLeft = defaultStudyTime * 60;
                updateTimerDisplay();
                startTimer();
                shortBreakBtn.textContent = "Start Break";
            } else { // If currently in study, switch to break
                startShortBreak();
            }
        });


        // --- Initial Load of Content ---
        document.addEventListener('DOMContentLoaded', () => {
            // Reset calendar memory for a fresh start each time
            localStorage.removeItem('deadlines'); // Comment this line if you want deadlines to persist

            loadSubjects();
            renderTodos();
            renderCalendar();
            
            // Initialize timer settings inputs
            studyTimeInput.value = defaultStudyTime;
            breakTimeInput.value = defaultBreakTime;
            updateTimerDisplay(); // Initialize timer display

            // Initialize with home section active and its quote
            showSection('home');
            changeQuote(); // Display initial home page quote
        });
    </script>
</body>
</html>
